syntax = "proto3";

package anvyl;

// Service definition for Anvyl infrastructure orchestrator
service AnvylService {
  // Host management
  rpc ListHosts(ListHostsRequest) returns (ListHostsResponse);
  rpc AddHost(AddHostRequest) returns (AddHostResponse);
  rpc UpdateHost(UpdateHostRequest) returns (UpdateHostResponse);
  rpc GetHostMetrics(GetHostMetricsRequest) returns (GetHostMetricsResponse);
  rpc HostHeartbeat(HostHeartbeatRequest) returns (HostHeartbeatResponse);

  // Container management
  rpc ListContainers(ListContainersRequest) returns (ListContainersResponse);
  rpc AddContainer(AddContainerRequest) returns (AddContainerResponse);
  rpc StopContainer(StopContainerRequest) returns (StopContainerResponse);
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse);
  rpc StreamLogs(StreamLogsRequest) returns (stream StreamLogsResponse);
  rpc ExecCommand(ExecCommandRequest) returns (ExecCommandResponse);

  // Agent management
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse);
  rpc LaunchAgent(LaunchAgentRequest) returns (LaunchAgentResponse);
  rpc StopAgent(StopAgentRequest) returns (StopAgentResponse);
  rpc GetAgentStatus(GetAgentStatusRequest) returns (GetAgentStatusResponse);

  // Host-level execution (Beszel agent functionality)
  rpc ExecCommandOnHost(ExecCommandOnHostRequest) returns (ExecCommandOnHostResponse);
}

// Host message definition
message Host {
  string id = 1;
  string name = 2;
  string ip = 3;
  bool agents_installed = 4;
  string os = 5;
  string last_seen = 6;  // ISO timestamp
  HostResources resources = 7;
  repeated string tags = 8;
  string status = 9;  // online, offline, maintenance
}

// Host resources information
message HostResources {
  double cpu_usage_percent = 1;
  int64 memory_total_bytes = 2;
  int64 memory_used_bytes = 3;
  int64 disk_total_bytes = 4;
  int64 disk_used_bytes = 5;
  string architecture = 6;
  int32 cpu_cores = 7;
}

// Container message definition
message Container {
  string id = 1;
  string name = 2;
  string image = 3;
  string host_id = 4;
  string status = 5;
  string created_at = 6;
  map<string, string> labels = 7;
  string launched_by_agent_id = 8;
}

// Agent message definition
message Agent {
  string id = 1;
  string name = 2;
  string host_id = 3;
  string entrypoint = 4;
  repeated string env = 5;
  string container_id = 6;  // If running in container
  string status = 7;  // stopped, running, failed, starting
  bool persistent = 8;
  string created_at = 9;
  string started_at = 10;
  string working_directory = 11;
  repeated string arguments = 12;
}

// Host management requests/responses
message ListHostsRequest {}

message ListHostsResponse {
  repeated Host hosts = 1;
}

message AddHostRequest {
  string name = 1;
  string ip = 2;
  string os = 3;
  repeated string tags = 4;
}

message AddHostResponse {
  Host host = 1;
  bool success = 2;
  string error_message = 3;
}

message UpdateHostRequest {
  string host_id = 1;
  HostResources resources = 2;
  string status = 3;
  repeated string tags = 4;
}

message UpdateHostResponse {
  Host host = 1;
  bool success = 2;
  string error_message = 3;
}

message GetHostMetricsRequest {
  string host_id = 1;
}

message GetHostMetricsResponse {
  HostResources resources = 1;
  bool success = 2;
  string error_message = 3;
}

message HostHeartbeatRequest {
  string host_id = 1;
}

message HostHeartbeatResponse {
  bool success = 1;
  string error_message = 2;
}

// Container management requests/responses
message ListContainersRequest {
  string host_id = 1;  // Optional: filter by host
}

message ListContainersResponse {
  repeated Container containers = 1;
}

message AddContainerRequest {
  string name = 1;
  string image = 2;
  string host_id = 3;
  map<string, string> labels = 4;
  repeated string ports = 5;
  repeated string volumes = 6;
  repeated string environment = 7;
  string launched_by_agent_id = 8;  // Optional: agent that launched this container
}

message AddContainerResponse {
  Container container = 1;
  bool success = 2;
  string error_message = 3;
}

message StopContainerRequest {
  string container_id = 1;
  int32 timeout = 2;  // Timeout in seconds
}

message StopContainerResponse {
  bool success = 1;
  string error_message = 2;
}

message GetLogsRequest {
  string container_id = 1;
  bool follow = 2;
  int32 tail = 3;  // Number of lines to return
}

message GetLogsResponse {
  string logs = 1;
  bool success = 2;
  string error_message = 3;
}

message StreamLogsRequest {
  string container_id = 1;
  bool follow = 2;
}

message StreamLogsResponse {
  string log_line = 1;
  string timestamp = 2;
  bool success = 3;
  string error_message = 4;
}

message ExecCommandRequest {
  string container_id = 1;
  repeated string command = 2;
  bool tty = 3;
}

message ExecCommandResponse {
  string output = 1;
  int32 exit_code = 2;
  bool success = 3;
  string error_message = 4;
}

// Agent management requests/responses
message ListAgentsRequest {
  string host_id = 1;  // Optional: filter by host
}

message ListAgentsResponse {
  repeated Agent agents = 1;
}

message LaunchAgentRequest {
  string name = 1;
  string host_id = 2;
  string entrypoint = 3;
  repeated string env = 4;
  bool use_container = 5;  // Whether to run in container or as native process
  string working_directory = 6;
  repeated string arguments = 7;
  bool persistent = 8;
}

message LaunchAgentResponse {
  Agent agent = 1;
  bool success = 2;
  string error_message = 3;
}

message StopAgentRequest {
  string agent_id = 1;
}

message StopAgentResponse {
  bool success = 1;
  string error_message = 2;
}

message GetAgentStatusRequest {
  string agent_id = 1;
}

message GetAgentStatusResponse {
  Agent agent = 1;
  bool success = 2;
  string error_message = 3;
}

// Host-level execution requests/responses
message ExecCommandOnHostRequest {
  string host_id = 1;
  repeated string command = 2;
  string working_directory = 3;
  repeated string env = 4;
  int32 timeout = 5;  // Timeout in seconds
}

message ExecCommandOnHostResponse {
  string output = 1;
  string stderr = 2;
  int32 exit_code = 3;
  bool success = 4;
  string error_message = 5;
}