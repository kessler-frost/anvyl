#!/bin/bash

# Anvyl Development Setup Script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß Anvyl Development Setup${NC}"
echo "================================"

# Get the project root directory
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
echo -e "${BLUE}üìÅ Project root: $PROJECT_ROOT${NC}"

# Check if we're in the right directory
if [[ ! -f "$PROJECT_ROOT/pyproject.toml" ]]; then
    echo -e "${RED}‚ùå This doesn't appear to be the Anvyl project root.${NC}"
    echo -e "${RED}   Please run this script from the Anvyl project directory.${NC}"
    exit 1
fi

# Check Python version
echo -e "${YELLOW}üêç Checking Python version...${NC}"
python_version=$(python3 --version 2>&1 | cut -d' ' -f2)
required_version="3.12"

if [[ "$(printf '%s\n' "$required_version" "$python_version" | sort -V | head -n1)" != "$required_version" ]]; then
    echo -e "${RED}‚ùå Python $required_version or higher is required. Found: $python_version${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Python $python_version is compatible${NC}"

# Check if Docker is available
echo -e "${YELLOW}üê≥ Checking Docker...${NC}"
if command -v docker &> /dev/null; then
    if docker info > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker is available and running${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Docker is installed but not running${NC}"
        echo -e "${YELLOW}   Please start Docker and run this script again${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker not found${NC}"
    echo -e "${YELLOW}   Please install Docker to use containerized features${NC}"
fi

# Create virtual environment
echo -e "${YELLOW}üêç Creating Python virtual environment...${NC}"
if [[ -d "$PROJECT_ROOT/venv" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Virtual environment already exists. Removing...${NC}"
    rm -rf "$PROJECT_ROOT/venv"
fi

python3 -m venv "$PROJECT_ROOT/venv"
echo -e "${GREEN}‚úÖ Virtual environment created${NC}"

# Activate virtual environment
echo -e "${YELLOW}üîß Activating virtual environment...${NC}"
source "$PROJECT_ROOT/venv/bin/activate"

# Upgrade pip
echo -e "${YELLOW}üì¶ Upgrading pip...${NC}"
pip install --upgrade pip

# Install dependencies
echo -e "${YELLOW}üì¶ Installing Python dependencies...${NC}"
pip install -e .

echo -e "${GREEN}‚úÖ Dependencies installed successfully${NC}"

# Create necessary directories
echo -e "${YELLOW}üìÅ Creating necessary directories...${NC}"
mkdir -p "$PROJECT_ROOT/anvyl/agents"
mkdir -p ~/.anvyl/agents

echo -e "${GREEN}‚úÖ Directories created${NC}"

# Install CLI
echo -e "${YELLOW}üîß Installing CLI...${NC}"
pip install -e .

echo -e "${GREEN}‚úÖ CLI installed successfully${NC}"

# Test installation
echo -e "${YELLOW}üß™ Testing installation...${NC}"
if command -v anvyl &> /dev/null; then
    echo -e "${GREEN}‚úÖ CLI is available${NC}"
    anvyl --version
else
    echo -e "${RED}‚ùå CLI installation failed${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}üéâ Anvyl development setup completed successfully!${NC}"
echo ""
echo -e "${BLUE}üìã Next Steps:${NC}"
echo -e "1. Start the UI stack: ${YELLOW}./scripts/start_anvyl_ui.sh${NC}"
echo -e "2. Create an AI agent: ${YELLOW}anvyl agent create my-agent --provider lmstudio --auto-start${NC}"
echo -e "3. Execute instructions: ${YELLOW}anvyl agent act my-agent \"Show me all hosts\"${NC}"
echo ""
echo -e "${BLUE}üìö Useful Commands:${NC}"
echo -e "‚Ä¢ ${YELLOW}anvyl --help${NC} - Show CLI help"
echo -e "‚Ä¢ ${YELLOW}anvyl agent --help${NC} - Show agent commands"
echo -e "‚Ä¢ ${YELLOW}anvyl status${NC} - Show system status"
echo ""
echo -e "${BLUE}üîß Development:${NC}"
echo -e "‚Ä¢ Activate venv: ${YELLOW}source venv/bin/activate${NC}"
echo -e "‚Ä¢ Run tests: ${YELLOW}python -m pytest${NC}"
echo -e "‚Ä¢ Stop UI: ${YELLOW}./scripts/stop_anvyl_ui.sh${NC}"